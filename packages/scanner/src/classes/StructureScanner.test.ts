import { StructureScanner } from "./StructureScanner";

describe("StructureScanner", () => {
  const path = [__dirname, "..", "..", "example"];

  test("should resolve all files", () => {
    const scanner = new StructureScanner();

    expect(scanner.scan(__dirname)).toEqual([
      {
        baseName: "StructureScanner",
        basePath: "StructureScanner.test",
        children: [],
        extension: "ts",
        fullName: "StructureScanner.test.ts",
        fullPath: expect.stringContaining("/src/class/StructureScanner.test.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "StructureScanner.test.ts",
        types: ["test"],
      },
      {
        baseName: "StructureScanner",
        basePath: "StructureScanner",
        children: [],
        extension: "ts",
        fullName: "StructureScanner.ts",
        fullPath: expect.stringContaining("/src/class/StructureScanner.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "StructureScanner.ts",
        types: [],
      },
      {
        baseName: "index",
        basePath: "index",
        children: [],
        extension: "ts",
        fullName: "index.ts",
        fullPath: expect.stringContaining("/src/class/index.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "index.ts",
        types: [],
      },
    ]);
  });

  test("should resolve with denied extensions", () => {
    const scanner = new StructureScanner({
      deniedExtensions: [/js$/, /ts$/, /txt$/],
    });

    expect(StructureScanner.flatten(scanner.scan(...path))).toEqual([
      {
        baseName: "[file9]",
        basePath: "files/[parent4]/[file9]",
        children: [],
        extension: "json",
        fullName: "[file9].json",
        fullPath: expect.stringContaining("/example/files/[parent4]/[file9].json"),
        isDirectory: false,
        isFile: true,
        parents: ["files", "[parent4]"],
        relativePath: "files/[parent4]/[file9].json",
        types: [],
      },
      {
        baseName: "file4",
        basePath: "files/file4",
        children: [],
        extension: "json",
        fullName: "file4.json",
        fullPath: expect.stringContaining("/example/files/file4.json"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file4.json",
        types: [],
      },
    ]);
  });

  test("should resolve with denied directories", () => {
    const scanner = new StructureScanner({
      deniedDirectories: [/parent/],
    });

    expect(StructureScanner.flatten(scanner.scan(...path))).toEqual([
      {
        baseName: "file1",
        basePath: "files/file1",
        children: [],
        extension: "ts",
        fullName: "file1.ts",
        fullPath: expect.stringContaining("/example/files/file1.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file1.ts",
        types: [],
      },
      {
        baseName: "file10",
        basePath: "files/file10.test-type",
        children: [],
        extension: "ts",
        fullName: "file10.test-type.ts",
        fullPath: expect.stringContaining("/example/files/file10.test-type.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file10.test-type.ts",
        types: ["test-type"],
      },
      {
        baseName: "file11",
        basePath: "files/file11.other.type",
        children: [],
        extension: "ts",
        fullName: "file11.other.type.ts",
        fullPath: expect.stringContaining("/example/files/file11.other.type.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file11.other.type.ts",
        types: ["type", "other"],
      },
      {
        baseName: "file2",
        basePath: "files/file2",
        children: [],
        extension: "txt",
        fullName: "file2.txt",
        fullPath: expect.stringContaining("/example/files/file2.txt"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file2.txt",
        types: [],
      },
      {
        baseName: "file3",
        basePath: "files/file3",
        children: [],
        extension: "js",
        fullName: "file3.js",
        fullPath: expect.stringContaining("/example/files/file3.js"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file3.js",
        types: [],
      },
      {
        baseName: "file4",
        basePath: "files/file4",
        children: [],
        extension: "json",
        fullName: "file4.json",
        fullPath: expect.stringContaining("/example/files/file4.json"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file4.json",
        types: [],
      },
      {
        baseName: "index",
        basePath: "index",
        children: [],
        extension: "ts",
        fullName: "index.ts",
        fullPath: expect.stringContaining("/example/index.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "index.ts",
        types: [],
      },
    ]);
  });

  test("should resolve with denied file names", () => {
    const scanner = new StructureScanner({
      deniedDirectories: [/file/],
    });

    expect(StructureScanner.flatten(scanner.scan(...path))).toEqual([
      {
        baseName: "index",
        basePath: "index",
        children: [],
        extension: "ts",
        fullName: "index.ts",
        fullPath: expect.stringContaining("/example/index.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "index.ts",
        types: [],
      },
    ]);
  });

  test("should resolve with denied file types", () => {
    const scanner = new StructureScanner({
      deniedTypes: [/^test$/, /^type$/],
    });

    expect(StructureScanner.flatten(scanner.scan(...path))).toEqual([
      {
        baseName: "[file9]",
        basePath: "files/[parent4]/[file9]",
        children: [],
        extension: "json",
        fullName: "[file9].json",
        fullPath: expect.stringContaining("/example/files/[parent4]/[file9].json"),
        isDirectory: false,
        isFile: true,
        parents: ["files", "[parent4]"],
        relativePath: "files/[parent4]/[file9].json",
        types: [],
      },
      {
        baseName: "file1",
        basePath: "files/file1",
        children: [],
        extension: "ts",
        fullName: "file1.ts",
        fullPath: expect.stringContaining("/example/files/file1.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file1.ts",
        types: [],
      },
      {
        baseName: "file10",
        basePath: "files/file10.test-type",
        children: [],
        extension: "ts",
        fullName: "file10.test-type.ts",
        fullPath: expect.stringContaining("/example/files/file10.test-type.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file10.test-type.ts",
        types: ["test-type"],
      },
      {
        baseName: "file2",
        basePath: "files/file2",
        children: [],
        extension: "txt",
        fullName: "file2.txt",
        fullPath: expect.stringContaining("/example/files/file2.txt"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file2.txt",
        types: [],
      },
      {
        baseName: "file3",
        basePath: "files/file3",
        children: [],
        extension: "js",
        fullName: "file3.js",
        fullPath: expect.stringContaining("/example/files/file3.js"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file3.js",
        types: [],
      },
      {
        baseName: "file4",
        basePath: "files/file4",
        children: [],
        extension: "json",
        fullName: "file4.json",
        fullPath: expect.stringContaining("/example/files/file4.json"),
        isDirectory: false,
        isFile: true,
        parents: ["files"],
        relativePath: "files/file4.json",
        types: [],
      },
      {
        baseName: "file5",
        basePath: "files/parent1/file5",
        children: [],
        extension: "ts",
        fullName: "file5.ts",
        fullPath: expect.stringContaining("/example/files/parent1/file5.ts"),
        isDirectory: false,
        isFile: true,
        parents: ["files", "parent1"],
        relativePath: "files/parent1/file5.ts",
        types: [],
      },
      {
        baseName: "file6",
        basePath: "files/parent1/parent2/file6",
        children: [],
        extension: "js",
        fullName: "file6.js",
        fullPath: expect.stringContaining("/example/files/parent1/parent2/file6.js"),
        isDirectory: false,
        isFile: true,
        parents: ["files", "parent1", "parent2"],
        relativePath: "files/parent1/parent2/file6.js",
        types: [],
      },
      {
        baseName: "file7",
        basePath: "files/parent3/file7",
        children: [],
        extension: "txt",
        fullName: "file7.txt",
        fullPath: expect.stringContaining("/example/files/parent3/file7.txt"),
        isDirectory: false,
        isFile: true,
        parents: ["files", "parent3"],
        relativePath: "files/parent3/file7.txt",
        types: [],
      },
      {
        baseName: "index",
        basePath: "index",
        children: [],
        extension: "ts",
        fullName: "index.ts",
        fullPath: expect.stringContaining("/example/index.ts"),
        isDirectory: false,
        isFile: true,
        parents: [],
        relativePath: "index.ts",
        types: [],
      },
    ]);
  });
});
